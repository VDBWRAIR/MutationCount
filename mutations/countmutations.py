#!/usr/bin/env python

#####################################################################
##          Count Mutations
##  Author: Tyghe Vallard
##  Email: vallardt@gmail.com
##  Date: 10/1/2012
##  Purpose:
##      Count the number of mutations for each sequence in a file generated
##      by mutalign.py by date
##      Output will be mutations<tab>date
##      Sequence names are assumed to be split up by | symbols
##      and the date is in the -4(YYYY), -3(MM), -2(DD) columns
#####################################################################

from optparse import OptionParser
from datetime import date
import sys
import re

class CountMutations:
    def __init__( self ):
        pass

    def _to_int( self, str ):
        """
            Convert str to int if it can otherwise 0
        """
        tmp = 1
        try:
            tmp = int( str)
        except ValueError:
            pass

        return tmp

    def _get_date( self, seq_def ):
        """
            Parses a sequence definition and extracts the date
        """
        parts = seq_def.split( '|' )

        # Probably no date if there is no | in the line
        if len( parts ) == 1:
            return date( 1800, 1, 1 )

        try:
            y = int( parts[-4] )
        except ValueError:
            print "Failed on this definition line"
            print seq_def
            print parts
            sys.exit( -1 )
            m = self._to_int( parts[-3] )
            d = self._to_int( parts[-2] )
            dt = date( y, m, d )
            return dt

    def _get_gi( self, seq_def ):
        """
            Parses genbank id out
        """
        parts = seq_def.split( '|' )
        if len( parts ) > 1:
            return parts[1]
        else:
            return seq_def

    def _get_name( self, seq_def ):
        """
            Parses a sequence definition and extracts the name
            Assumed to be in the 2 column after split( '|' ) and
            between ()
        """
        p = re.compile( '\((.*)\)' )
        parts = seq_def.split( '|' )
        if len( parts ) > 1:
            m = p.search( parts[2] )
            return m.group( 1 )
        else:
            return seq_def

    def parse( self, mutations_file, cutoff_date ):
        """
            Parse a mutations file generated by mutalign.py
        """
        fh = open( mutations_file )
        chart = []
        mut_count = 0
        last_date = None
        inc = 1
        for line in fh:
            # Start new date and set counter to 0
            if not line.startswith( 'Q: ' ):
                # Set mutation count for last date
                if last_date:
                    chart[-1][3] = mut_count

                # Get the new date and set it as last_date
                last_date = self._get_date( line )

                if last_date < cutoff_date:
                    inc = -1
                else:
                    inc = 1
                name = self._get_name( line )
                gi = self._get_gi( line )
                chart.append( [gi, last_date, name, 0] )
                mut_count = 0
            # Else Count mutations
            mut_count += inc

        fh.close()

        chart[-1][3] = mut_count

        return chart

    def get_chart( self, mutations_file, cutoff_date ):
        p = self.parse( mutations_file, cutoff_date )
        for gi, dt, name, num in p:
            print "%s,%s,%s,%s" % (gi, name, dt, num)

def parse_date( dte ):
    if '-' in dte:
        p = dte.split( '-' )
    elif '/' in dte:
        p = dte.split( '/' )

    if len( p ) == 3:
        return date( int( p[0] ), int( p[1] ), int( p[2] ) )

def getoptions( ):
    opt = OptionParser()
    dt = "1900-01-01"
    opt.add_option( '--file', dest='mutations_file', help='File path to .mutations file generated by mutalign.py' )
    opt.add_option( '--date', dest='cutoff_date', default=dt, help='Any sequences before this date will have a negative number. Default: %s' % dt )
    opt.add_option( '--test', dest='test', action='store_true', help='Run tests for this script' )

    options, args = opt.parse_args()

    if not options.mutations_file and not options.test:
        opt.print_help()
        sys.exit( -1 )

    return options

def test( options ):
    cm = CountMutations()
    cm.get_chart( 'mutations/wrair_pH1N1_HA.mutations', parse_date( options.cutoff_date ) )

def main( options ):
    if options.test:
        test( options )
    else:
        cm = CountMutations()
        cm.get_chart( options.mutations_file, parse_date( options.cutoff_date ) )

if __name__ == '__main__':
    options = getoptions( )
    main( options )
